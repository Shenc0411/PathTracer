// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Random.cginc"

struct Ray 
{
	float3 origin;
	float3 direction;
};

struct HitRecord
{
	float3 hitPoint;
	float3 normal;
	float3 albedo;
	float3 emission;
	float distance;
	float material;
	float fuzz;
	float refractiveIndex;
};

struct Sphere 
{
	float3 position;
	float3 albedo;
	float3 emission;
	float radius;
	float material;
	float fuzz;
	float refractiveIndex;
};

#define numSamples 32768

RWTexture2D<float4> Texture;
StructuredBuffer<float3> screenPixelPositions;
StructuredBuffer<Sphere> spheres;
StructuredBuffer<float3> sphericalSamples;

float3 cameraPosition;
float3 ambientLight;
float widthPerPixel;
float heightPerPixel;

float3 seed;

int pixelResolutionX;
int pixelResolutionY;
int numIterations;
int sampleRate;
int numSpheres;

uint wang_hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed;
}

uint RandomInt(inout uint state) 
{
	state = wang_hash(state);

	return state;
}

float Noise(inout uint state)
{
	state = wang_hash(state);

	return state * (1.0 / 4294967296.0);
}

float3 RandomPointInUnitSphere(inout uint state)
{
	/*float3 p;
	do
	{
		p = 2.0f * float3(Noise(state),
			Noise(state),
			Noise(state))
			- float3(1.0f, 1.0f, 1.0f);
	} while (dot(p, p) >= 1.0f);
	return p;*/
	//return normalize(float3(Noise(state), Noise(state), Noise(state)));
	return sphericalSamples[RandomInt(state) % numSamples];
}

bool RaySphereCollision(Ray ray, out HitRecord hitRecord)
{
	bool hasHit = false;
	hitRecord.distance = 3e+38F;

	for(int i = 0; i < numSpheres; ++i)
	{
		float3 oc = ray.origin - spheres[i].position;
		float a = dot(ray.direction, ray.direction);
		float b = 2.0f * dot(oc, ray.direction);
		float c = dot(oc, oc) - spheres[i].radius * spheres[i].radius;
		float discriminant = b * b - 4.0f * a * c;
		if (discriminant > 0)
		{
			float hitDistance = (-b - sqrt(discriminant)) / (2.0f * a);
			if (hitDistance > 1e-10F && hitDistance < 3e+38F)
			{
				if (!hasHit || hitDistance < hitRecord.distance)
				{
					float3 hitPoint = ray.origin + hitDistance * ray.direction;
					float3 hitNormal = normalize(hitPoint - spheres[i].position);

					hitRecord.hitPoint = hitPoint;
					hitRecord.normal = hitNormal;
					hitRecord.material = spheres[i].material;
					hitRecord.albedo = spheres[i].albedo;
					hitRecord.emission = spheres[i].emission;
					hitRecord.distance = hitDistance;
					hitRecord.fuzz = spheres[i].fuzz;
					hitRecord.refractiveIndex = spheres[i].refractiveIndex;

					hasHit = true;
					continue;
				}
			}

			hitDistance = (-b + sqrt(discriminant)) / (2.0f * a);
			if (hitDistance > 1e-10F && hitDistance < 3e+38F)
			{
				if (!hasHit || hitDistance < hitRecord.distance)
				{
					float3 hitPoint = ray.origin + hitDistance * ray.direction;
					float3 hitNormal = normalize(hitPoint - spheres[i].position);

					hitRecord.hitPoint = hitPoint;
					hitRecord.normal = hitNormal;
					hitRecord.material = spheres[i].material;
					hitRecord.albedo = spheres[i].albedo;
					hitRecord.emission = spheres[i].emission;
					hitRecord.distance = hitDistance;
					hitRecord.fuzz = spheres[i].fuzz;
					hitRecord.refractiveIndex = spheres[i].refractiveIndex;

					hasHit = true;
					continue;
				}
			}
		}
	}

	return hasHit;
}

#define _MaxDepth 5

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Ray ray;
	ray.origin = cameraPosition;
	HitRecord hitRecord;
	float3 emissions[5];
	float3 attenuations[5];
	float3 result = ambientLight;
	float3 color = float3(0.0, 0.0, 0.0);
	int depth = _MaxDepth - 1;
	int index = id.x * pixelResolutionY + id.y;
	uint state = floor(dot(seed, id) * numIterations);

	for(int s = 0; s < sampleRate; ++s)
	{

		float u = Noise(state);
		float v = Noise(state);
		float2 uv = float2(id.x + u, id.y + v);
		float3 offset = float3(widthPerPixel * u, heightPerPixel * v, 0);
		ray.direction = normalize(screenPixelPositions[index] + offset - cameraPosition);

		result = ambientLight;
		depth = _MaxDepth - 1;

		for (int i = 0; i < _MaxDepth; ++i)
		{
			attenuations[i] = ambientLight;

			if (RaySphereCollision(ray, hitRecord))
			{

				float3 attenuation;
				float3 scatteredRayDirection;
				bool scatter = false;

				if (hitRecord.material == 1.0f)
				{
					//Lambertian
					float3 target = hitRecord.hitPoint + hitRecord.normal + RandomPointInUnitSphere(state);
					scatteredRayDirection = target - hitRecord.hitPoint;
					attenuation = hitRecord.albedo;
					scatter = true;
				}
				else if (hitRecord.material == 2.0f)
				{
					//Metal
					scatteredRayDirection = ray.direction - 2.0f * dot(ray.direction, hitRecord.normal) * hitRecord.normal
						+ hitRecord.fuzz * RandomPointInUnitSphere(state) * hitRecord.fuzz;
					attenuation = hitRecord.albedo;

					if (dot(scatteredRayDirection, hitRecord.normal) > 0.0f)
					{
						scatter = true;
					}

				}
				else if (hitRecord.material == 3.0f)
				{
					//Refractive
					float3 reflectedDirection = ray.direction - 2.0f * dot(ray.direction, hitRecord.normal) * hitRecord.normal;
					float3 outwardNormal;
					float3 refractedDirection;
					float reflectProbablity = 1.0f;
					float cosine = 0.0f;
					float niOverNt = 0.0f;
					attenuation = float3(1.0f, 1.0f, 1.0f);

					if (dot(ray.direction, hitRecord.normal) > 0.0f)
					{
						outwardNormal = -hitRecord.normal;
						niOverNt = hitRecord.refractiveIndex;
						cosine = hitRecord.refractiveIndex * dot(ray.direction, hitRecord.normal) / length(ray.direction);
					}
					else
					{
						outwardNormal = hitRecord.normal;
						niOverNt = 1.0f / hitRecord.refractiveIndex;
						cosine = -dot(ray.direction, hitRecord.normal) / length(ray.direction);
					}

					float dt = dot(ray.direction, hitRecord.normal);
					float discriminant = 1.0f - niOverNt * niOverNt * (1.0f - dt * dt);


					if (discriminant > 0.0f)
					{
						//Refract
						refractedDirection = niOverNt * (ray.direction - outwardNormal * dt) - outwardNormal * sqrt(discriminant);
						//Schlick Approximation
						float r0 = (1.0f - hitRecord.refractiveIndex) / (1.0f + hitRecord.refractiveIndex);
						r0 = r0 * r0;
						reflectProbablity = r0 + (1 - r0) * pow((1.0f - cosine), 5.0f);
					}

					if (Noise(state) < reflectProbablity)
					{
						scatteredRayDirection = reflectedDirection;
					}
					else
					{
						scatteredRayDirection = refractedDirection;
					}

					scatter = true;
				}

				if (scatter)
				{
					//TDRay scatteredRay = new TDRay(hitRecord.point, scatteredRayDirection, ray.uv);

					ray.origin = hitRecord.hitPoint;
					ray.direction = normalize(scatteredRayDirection);

					emissions[i] = hitRecord.emission;
					attenuations[i] = attenuation;

					//return hitRecord.emission + attenuation * TraceColor(scatteredRay, numBounces + 1);
				}
				else
				{
					depth = i;
					break;
				}

				//return float3.zero;
			}
			else
			{
				depth = i;
				break;
			}
			//return this.ambientLight;
		}

		for (int j = depth; j >= 0; --j)
		{
			result = emissions[j] + result * attenuations[j];
		}

		color += result;
	}

	color /= sampleRate;

	Texture[id.xy] = float4((Texture[id.xy].xyz * numIterations + color) / (numIterations + 1), 0.0f);
}


